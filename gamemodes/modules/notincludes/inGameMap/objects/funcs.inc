CreateVCObject(id2, modelid2, Float:x2, Float:y2, Float:z2, Float:rx2, Float:ry2, Float:rz2, world2 = -1, interior2 = -1, type_id = 0, index = -1)
{
	if(!id2) return 0;

	//world = VC_WORLD;
	new streamer_objectid, model_type_index = GetVCModelTypeIndexById(type_id);

	if(model_type_index == -1) streamer_objectid = CreateDynamicObject(modelid2, x2, y2, z2, rx2, ry2, rz2, world2, interior2, .streamdistance = DEFAULT_VC_STREAM_DISTANCE + 50.0, .drawdistance = DEFAULT_VC_STREAM_DISTANCE);
	else streamer_objectid = CreateDynamicObject(modelid2, x2, y2, z2, rx2, ry2, rz2, world2, interior2, .streamdistance = Vc_Models_Types[model_type_index][vc_model_type_STREAM_DISTANCE] + 50.0, .drawdistance = Vc_Models_Types[model_type_index][vc_model_type_STREAM_DISTANCE], .priority = Vc_Models_Types[model_type_index][vc_model_type_PRIORITY]);

	if(type_id == 1) Streamer_ToggleItemStatic(STREAMER_TYPE_OBJECT, streamer_objectid, true); //landmasses

	if(vcObjects_Debug)
	{
		new Text3D:streamer_labelid, label_str[128], type_str[32];

		if(model_type_index == -1) format(type_str, sizeof type_str, "null");
		else format(type_str, sizeof type_str, "%s", Vc_Models_Types[model_type_index][vc_model_type_NAME]);
		format(label_str, sizeof label_str, "ID: %d\nObjectID: %d | Modelid: %d | Type: %s", id2, streamer_objectid, modelid2, type_str);
		streamer_labelid = CreateDynamic3DTextLabel(label_str, -1, x2, y2, z2, DEBUG_LABEL_STREAM_DISTANCE, .worldid = world2, .interiorid = interior2);
		Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, streamer_labelid, E_STREAMER_EXTRA_ID, _:LABEL_TYPE_VCO_DEBUG); 
		if(index > -1)
		{
			Vc_Objects[index][vc_OBJECT_LABEL] = streamer_labelid;
		}
	}

	Streamer_SetIntData(STREAMER_TYPE_OBJECT, streamer_objectid, E_STREAMER_EXTRA_ID, _:OBJECT_TYPE_VCO); 

	// Iterator
	if(index > -1)
	{
		Vc_Objects[index][vc_ID] = id2;
		Vc_Objects[index][vc_OBJECTID] = streamer_objectid;
		Vc_Objects[index][vc_MODELID] = modelid2;
		Vc_Objects[index][vc_X] = x2;
		Vc_Objects[index][vc_Y] = y2;
		Vc_Objects[index][vc_Z] = z2;
		Vc_Objects[index][vc_RX] = rx2;
		Vc_Objects[index][vc_RY] = ry2;
		Vc_Objects[index][vc_RZ] = rz2;
		Vc_Objects[index][vc_INTERIORID] = interior2;
		Vc_Objects[index][vc_WORLDID] = world2;
		Vc_Objects[index][vc_OBJECT_TYPE] = type_id;
		Vc_Objects[index][vc_OBJECT_TYPE_INDEX] = model_type_index;
		Iter_Add(Vc_Objects, index);
	}
	//
	return streamer_objectid;
}

GetVcObjectIndexById(id3)
{
	foreach(new i : Vc_Objects)
	{
		if(Vc_Objects[i][vc_ID] == id3)
		{
			return i;
		}
	}
	return -1;
}

UpdateVcObject(index, bool:update = false)
{
	if(!Iter_Contains(Vc_Objects, index)) return 0;
	if(!IsValidDynamicObject(Vc_Objects[index][vc_OBJECTID])) return 0;

	SetDynamicObjectPos(Vc_Objects[index][vc_OBJECTID], Vc_Objects[index][vc_X], Vc_Objects[index][vc_Y], Vc_Objects[index][vc_Z]);
	SetDynamicObjectRot(Vc_Objects[index][vc_OBJECTID], Vc_Objects[index][vc_RX], Vc_Objects[index][vc_RY], Vc_Objects[index][vc_RZ]);

	if(vcObjects_Debug)
	{
		if(IsValidDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL]))
		{
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Vc_Objects[index][vc_OBJECT_LABEL], E_STREAMER_X, Vc_Objects[index][vc_X]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Vc_Objects[index][vc_OBJECT_LABEL], E_STREAMER_Y, Vc_Objects[index][vc_Y]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Vc_Objects[index][vc_OBJECT_LABEL], E_STREAMER_Z, Vc_Objects[index][vc_Z]);
		}
	}

	if(update)
	{
		mysql_format(vc_map_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE objects SET x = '%f', y = '%f', z = '%f', rx = '%f', ry = '%f', rz = '%f' WHERE id = '%d';", Vc_Objects[index][vc_X], Vc_Objects[index][vc_Y], Vc_Objects[index][vc_Z], Vc_Objects[index][vc_RX], Vc_Objects[index][vc_RY], Vc_Objects[index][vc_RZ], Vc_Objects[index][vc_ID]);
		mysql_tquery(vc_map_db, QUERY_BUFFER, "", "");
	}
	return 1;
}

DeleteVcObject(index, bool:update = false)
{
	if(!Iter_Contains(Vc_Objects, index)) return 0;
	if(!IsValidDynamicObject(Vc_Objects[index][vc_OBJECTID])) return 0;

	if(vcObjects_Debug)
	{
		if(IsValidDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL]))
		{
			DestroyDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL]);
			Vc_Objects[index][vc_OBJECT_LABEL] = Text3D:INVALID_STREAMER_ID;
		}
	}

	if(update)
	{
		mysql_format(vc_map_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM objects WHERE id = '%d';", Vc_Objects[index][vc_ID]);
		mysql_tquery(vc_map_db, QUERY_BUFFER, "", "");
	}

	DestroyDynamicObject(Vc_Objects[index][vc_OBJECTID]);
	Vc_Objects[index][vc_ID] = 0;
	Vc_Objects[index][vc_OBJECTID] = INVALID_STREAMER_ID;
	Vc_Objects[index][vc_MODELID] = 0;
	Vc_Objects[index][vc_X] = 0.0;
	Vc_Objects[index][vc_Y] = 0.0;
	Vc_Objects[index][vc_Z] = 0.0;
	Vc_Objects[index][vc_RX] = 0.0;
	Vc_Objects[index][vc_RY] = 0.0;
	Vc_Objects[index][vc_RZ] = 0.0;
	Vc_Objects[index][vc_INTERIORID] = 0;
	Vc_Objects[index][vc_WORLDID] = 0;
	Vc_Objects[index][vc_OBJECT_TYPE] = 0;
	Vc_Objects[index][vc_OBJECT_TYPE_INDEX] = 0;
	Iter_Remove(Vc_Objects, index);
	return 1;
}

DisableVcObject(index, bool:update = false)
{
	if(!Iter_Contains(Vc_Objects, index)) return 0;
	if(!IsValidDynamicObject(Vc_Objects[index][vc_OBJECTID])) return 0;

	if(vcObjects_Debug)
	{
		if(IsValidDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL]))
		{
			DestroyDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL]);
			Vc_Objects[index][vc_OBJECT_LABEL] = Text3D:INVALID_STREAMER_ID;
		}
	}

	if(update)
	{
		mysql_format(vc_map_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE objects SET enabled = '0' WHERE id = '%d';", Vc_Objects[index][vc_ID]);
		mysql_tquery(vc_map_db, QUERY_BUFFER, "", "");
	}

	DestroyDynamicObject(Vc_Objects[index][vc_OBJECTID]);
	Vc_Objects[index][vc_ID] = 0;
	Vc_Objects[index][vc_OBJECTID] = INVALID_STREAMER_ID;
	Vc_Objects[index][vc_MODELID] = 0;
	Vc_Objects[index][vc_X] = 0.0;
	Vc_Objects[index][vc_Y] = 0.0;
	Vc_Objects[index][vc_Z] = 0.0;
	Vc_Objects[index][vc_RX] = 0.0;
	Vc_Objects[index][vc_RY] = 0.0;
	Vc_Objects[index][vc_RZ] = 0.0;
	Vc_Objects[index][vc_INTERIORID] = 0;
	Vc_Objects[index][vc_WORLDID] = 0;
	Vc_Objects[index][vc_OBJECT_TYPE] = 0;
	Vc_Objects[index][vc_OBJECT_TYPE_INDEX] = 0;
	Iter_Remove(Vc_Objects, index);
	return 1;
}

UpdateVcObjectsSs()
{
	foreach(new i : Vc_Objects)
	{
		if(Vc_Objects[i][vc_OBJECT_TYPE_INDEX] != -1)
		{
			if(Vc_Objects[i][vc_OBJECT_TYPE_INDEX] == -1)
			{
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, DEFAULT_VC_STREAM_DISTANCE + 50.0);
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, DEFAULT_VC_STREAM_DISTANCE);
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_PRIORITY, 0);
			}
			else
			{
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE] + 50.0);
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE]);
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_PRIORITY, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_PRIORITY]);
			}
		}
	}
	return 1;
}

stock SetVcModelidObjectType(modelid3, type_index)
{
	foreach(new i : Vc_Objects)
	{
		if(Vc_Objects[i][vc_MODELID] == modelid3)
		{
			if(type_index == -1)
			{
				Vc_Objects[i][vc_OBJECT_TYPE] = 0;
				Vc_Objects[i][vc_OBJECT_TYPE_INDEX] = type_index;

				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, DEFAULT_VC_STREAM_DISTANCE + 50.0);
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, DEFAULT_VC_STREAM_DISTANCE);
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_PRIORITY, 0);
				if(vcObjects_Debug)  UpdateVcObjectLabelText(i);
			}
			else
			{
				Vc_Objects[i][vc_OBJECT_TYPE] = Vc_Models_Types[type_index][vc_model_type_ID];
				Vc_Objects[i][vc_OBJECT_TYPE_INDEX] = type_index;

				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE] + 50.0);
				Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE]);
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[i][vc_OBJECTID], E_STREAMER_PRIORITY, Vc_Models_Types[ Vc_Objects[i][vc_OBJECT_TYPE_INDEX] ][vc_model_type_PRIORITY]);
				if(vcObjects_Debug) UpdateVcObjectLabelText(i);
			}
		}
	}
	return 1;
}

AddVcObject(playerid, modelid3, duplicate = -1)
{
	new index = Iter_Free(Vc_Objects);
	if(index == cellmin) return 0;

	new Float:x3, Float:y3, Float:z3, Float:rx3, Float:ry3, Float:rz3, world3 = -1 /*GetPlayerVirtualWorld(playerid)*/, interior3 = -1 /*GetPlayerInterior(playerid)*/;
	if(modelid3 == -1 && duplicate != -1)
	{
		modelid3 = Vc_Objects[duplicate][vc_MODELID];
		x3 = Vc_Objects[duplicate][vc_X];
		y3 = Vc_Objects[duplicate][vc_Y];
		z3 = Vc_Objects[duplicate][vc_Z];
		rx3 = Vc_Objects[duplicate][vc_RX];
		ry3 = Vc_Objects[duplicate][vc_RY];
		rz3 = Vc_Objects[duplicate][vc_RZ];
	}
	else GetPlayerPos(playerid, x3, y3, z3);

	mysql_format(vc_map_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO objects (modelid, x, y, z, rx, ry, rz, world, interior) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d');", modelid3, x3, y3, z3, rx3, ry3, rz3, world3, interior3);
	mysql_tquery(vc_map_db, QUERY_BUFFER, "OnPlayerViceCityObjectAdding", "idffffffdd", playerid, modelid3, x3, y3, z3, rx3, ry3, rz3, world3, interior3);
	return 1;
}

SetVcObjectModelType(index, type_index)
{
	if(type_index == -1)
	{
		Vc_Objects[index][vc_OBJECT_TYPE] = 0;
		Vc_Objects[index][vc_OBJECT_TYPE_INDEX] = type_index;

		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, DEFAULT_VC_STREAM_DISTANCE + 50.0);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, DEFAULT_VC_STREAM_DISTANCE);
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_PRIORITY, 0);
	}
	else
	{
		Vc_Objects[index][vc_OBJECT_TYPE] = Vc_Models_Types[type_index][vc_model_type_ID];
		Vc_Objects[index][vc_OBJECT_TYPE_INDEX] = type_index;

		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_STREAM_DISTANCE, Vc_Models_Types[ Vc_Objects[index][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE] + 50.0);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_DRAW_DISTANCE, Vc_Models_Types[ Vc_Objects[index][vc_OBJECT_TYPE_INDEX] ][vc_model_type_STREAM_DISTANCE]);
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, Vc_Objects[index][vc_OBJECTID], E_STREAMER_PRIORITY, Vc_Models_Types[ Vc_Objects[index][vc_OBJECT_TYPE_INDEX] ][vc_model_type_PRIORITY]);
	}
	if(vcObjects_Debug) UpdateVcObjectLabelText(index);
	return 1;
}

UpdateVcObjectLabelText(index)
{
	if(!IsValidDynamic3DTextLabel(Vc_Objects[index][vc_OBJECT_LABEL])) return 0;

	new label_str[128], type_str[32];

	if(Vc_Objects[index][vc_OBJECT_TYPE_INDEX] == -1) format(type_str, sizeof type_str, "null");
	else format(type_str, sizeof type_str, "%s", Vc_Models_Types[ Vc_Objects[index][vc_OBJECT_TYPE_INDEX] ][vc_model_type_NAME]);
	format(label_str, sizeof label_str, "ID: %d\nObjectID: %d | Modelid: %d | Type: %s", Vc_Objects[index][vc_ID], Vc_Objects[index][vc_OBJECTID], Vc_Objects[index][vc_MODELID], type_str);

	UpdateDynamic3DTextLabelText(Vc_Objects[index][vc_OBJECT_LABEL], -1, label_str);
	return 1;
}

ToggleVcObjectsDebug(bool:toggle)
{
	if(toggle)
	{
		foreach(new i : Vc_Objects)
		{
			if(IsValidDynamic3DTextLabel(Vc_Objects[i][vc_OBJECT_LABEL]))
			{
				DestroyDynamic3DTextLabel(Vc_Objects[i][vc_OBJECT_LABEL]);
				Vc_Objects[i][vc_OBJECT_LABEL] = Text3D:INVALID_STREAMER_ID;
			}

			Vc_Objects[i][vc_OBJECT_LABEL] = CreateDynamic3DTextLabel("label_str", -1, Vc_Objects[i][vc_X], Vc_Objects[i][vc_Y], Vc_Objects[i][vc_Z], DEBUG_LABEL_STREAM_DISTANCE, .worldid = Vc_Objects[i][vc_WORLDID], .interiorid = Vc_Objects[i][vc_INTERIORID]);
			Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, Vc_Objects[i][vc_OBJECT_LABEL], E_STREAMER_EXTRA_ID, _:LABEL_TYPE_VCO_DEBUG); 
			UpdateVcObjectLabelText(i);
		}
	}
	else
	{
		foreach(new i : Vc_Objects)
		{
			if(IsValidDynamic3DTextLabel(Vc_Objects[i][vc_OBJECT_LABEL]))
			{
				DestroyDynamic3DTextLabel(Vc_Objects[i][vc_OBJECT_LABEL]);
				Vc_Objects[i][vc_OBJECT_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
		}
	}

	vcObjects_Debug = toggle;
	return 1;
}

CountVcObjectsWithNoType()
{
	new c;
	foreach(new i : Vc_Objects)
	{
		if(Vc_Objects[i][vc_OBJECT_TYPE] == 0)
		{
			c ++;
		}
	}
	return c;
}